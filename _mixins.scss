// Author: Tushar Shukla
// Github Repo: https://github.com/tusharshuklaa/SaSSEase---A-Mixins-Lab

/* #region Make a box */
/*
    Name: Box
    Desc: Create a box by providing width and height. If height is not provided then it uses width value as height
    Usage: 
    .my-rectangle {
        @include size(400px, 200px);
    }
    .my-square {
        @include size(400px);
    }
*/

@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

/* #endregion */


/* #region Position */
/*
    Name: Position
    Desc: Define position of an element as relative, absolute or fixed with top, left, margin etc values in no specific order
    Usage: 
    .float-btn {
        @include position("fixed" top 100px right 5px);
    }
*/

@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

/* *******************************************
    Name: Absolute
    Desc: Define position of an element as absolute with top, left, margin etc values in no specific order
    Dependent on: Position
    Usage: 
    .float-btn {
        @include absolute(top 100px right 5px);
    }
*/

@mixin absolute($args) {
    @include position("absolute", $args);
}

/* *******************************************

Name: Fixed
Desc: Define position of an element as fixed with top, left, margin etc values in no specific order
Dependent on: Position
Usage: 
.float-btn {
    @include fixed(top 100px right 5px);
}

*/

@mixin fixed($args) {
    @include position("fixed", $args);
}

/* #endregion */




/* ******************************************* */

/*
Position mixin
Usage:
.element {
@include absolute(top 0 left 1em);
}
*/

@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args) {
    @include position("absolute", $args);
}

@mixin fixed($args) {
    @include position("fixed", $args);
}

@mixin relative($args) {
    @include position("relative", $args);
}

/* ******************************************* */

/*
Prefix mixin
Usage:
.other-element {
@include prefix((
  column-count: 3,
  column-gap: 1em,
  column-rule: 1px solid silver,
  column-width: 20em
)), webkit moz);
}
*/

@mixin prefix($map, $vendors: webkit moz ms o) {
    @each $prop,
    $value in $map {
        @if $vendors {
            @each $vendor in $vendors {
                #{"-" + $vendor + "-" + $prop}: #{$value};
            }
        } // Dump regular property anyway
        #{$prop}: #{$value};
    }
}

/* ******************************************* */

/*
Breakpoints mixin
Usage:
.element {
color: red;

@include breakpoint(medium) {
  color: blue;
}
}
*/

$breakpoints: ( 
    'mobile' : ( max-width : 767px), 
    'iPad' : ( min-width : 768px), 
    'iPadPro': ( min-width: 1024px), 
    'medium': ( min-width : 992px), 
    'large' : ( min-width: 1200px), 
    'custom': ( min-height : 40em)
);
@mixin breakpoint($minname, $maxname: "") {
    @if map-has-key($breakpoints, $minname) {
        @if map-has-key($breakpoints, $maxname) {
            @media #{inspect(map-get($breakpoints, $minname))} and #{inspect(map-get($breakpoints, $maxname))} {
                @content;
            }
        }

        @else {
            @media #{inspect(map-get($breakpoints, $minname))} {
                @content;
            }
        }
    }

    @else {
        @warn "Couldn't find a breakpoint named `#{$minname}`.";
    }
}

/* ******************************************* */

/*
Opacity mixin
Usage:
.faded-text {
@include opacity(0.8);
}
*/

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

/* ******************************************* */

/*

*/

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------
// Flexbox display
@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}


// Inline-flex
// Usage: %inline-flex { @include inline-flex; }
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($fg: 1, $fs: 0, $fb: auto) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg)=='list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box: $fg-boxflex;
    -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flexbox: $fg $fs $fb;
    flex: $fg $fs $fb;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
    @if $direction==row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
        -moz-box-direction: reverse;
        -moz-box-orient: horizontal;
    }

    @else if $direction==column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
        -moz-box-direction: normal;
        -moz-box-orient: vertical;
    }

    @else if $direction==column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
        -moz-box-direction: reverse;
        -moz-box-orient: vertical;
    }

    @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
        -moz-box-orient: horizontal;
    }

    -webkit-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $wrap;

    @if $wrap==nowrap {
        -ms-flex-wrap: none;
    }

    @else {
        -ms-flex-wrap: $wrap;
    }

    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int+1;
    -moz-box-ordinal-group: $int+1;
    -webkit-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
    -moz-box-flex: $int;
    -webkit-flex-grow: $int;
    -ms-flex: $int;
    flex-grow: $int;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($int: 0) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex: $int;
    flex-shrink: $int;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}

// Axis Alignment
// - applies to: flex containers
// flex-start (default) | flex-end | center | space-between | space-around
// Note: space-* values not supported in older syntaxes.
@mixin justify-content($value: flex-start) {
    @if $value==flex-start {
        -webkit-box-pack: start;
        -moz-box-pack: start;
        -ms-flex-pack: start;
    }

    @else if $value==flex-end {
        -webkit-box-pack: end;
        -moz-box-pack: end;
        -ms-flex-pack: end;
    }

    @else if $value==space-between {
        -webkit-box-pack: justify;
        -moz-box-pack: justify;
        -ms-flex-pack: justify;
    }

    @else if $value==space-around {
        -ms-flex-pack: distribute;
    }

    @else {
        -webkit-box-pack: $value;
        -moz-box-pack: $value;
        -ms-flex-pack: $value;
    }

    -webkit-justify-content: $value;
    justify-content: $value;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;

    @if $value==flex-start {
        -ms-flex-line-pack: start;
    }

    @else if $value==flex-end {
        -ms-flex-line-pack: end;
    }

    @else {
        -ms-flex-line-pack: $value;
    }

    align-content: $value;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch (default)
@mixin align-items($value: stretch) {
    @if $value==flex-start {
        -webkit-box-align: start;
        -moz-box-align: start;
        -ms-flex-align: start;
    }

    @else if $value==flex-end {
        -webkit-box-align: end;
        -moz-box-align: end;
        -ms-flex-align: end;
    }

    @else {
        -webkit-box-align: $value;
        -moz-box-align: $value;
        -ms-flex-align: $value;
    }

    -webkit-align-items: $value;
    align-items: $value;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;

    @if $value==flex-start {
        -ms-flex-item-align: start;
    }

    @else if $value==flex-end {
        -ms-flex-item-align: end;
    }

    @else {
        -ms-flex-item-align: $value;
    }

    align-self: $value;
}

/* ******************************************* */

/*
Name: Truncate String
Desc: Pass max-width (for example: 200px) and text within should have ellipsis effect applied to it
Usage:
.title-text {
@include truncateString(200px);
}
*/

@mixin truncateString($max-width) {
    max-width: $max-width;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

/* ******************************************* */

@mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
        @content;
    }
}

@mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
        @content;
    }

    @include optional-at-root(':-moz-placeholder') {
        @content;
    }

    @include optional-at-root('::-moz-placeholder') {
        @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
        @content;
    }
}

@mixin selection() {

    &::-moz-selection,
    ::selection {
        @content;
    }
}

/* ******************************************* */

@mixin touch-device() {
    @media (hover: none) {
        @content;
    }
}

$fontArgs: ('f': font-family,
's': font-size,
'c': color,
'w': font-weight,
'l': line-height);

@mixin setFont($args) {
    @each $o in f s c w l {
        $i: index($args, $o);

        @if $i and $i+1 <=length($args) {
            #{inspect(map-get($fontArgs, $o))}: nth($args, $i + 1);
        }
    }
}