// Author: Tushar Shukla
// Github Repo: https://github.com/tusharshuklaa/SaSSEase---A-Mixins-Lab

//#region Setting element dimensions

/*
    Name : Box
    Desc : Create a box by providing width and height. If height is not provided then it uses width value as height
    Usage: 
    %rectangle {
        @include size(400px, 200px);
    }
    %square {
        @include size(400px);
    }
*/

@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

/*
    Name : Modern Width
    Desc : It defines modern properties of width with proper vendor prefixes.
        No IE support for modern values
    Usage: 
    .element{
        @include width(min-content);
    }
    .myElement {
        @include width(400px);
    }
    Reference: https://css-tricks.com/almanac/properties/w/width/
*/
@mixin width($property, $value) {
    @if $value==fit-content or $value==min-content or $value==max-content {
        #{$property}: -webkit-#{$value};
        #{$property}: -moz-#{$value};
        #{$property}: $value;
    }

    @else if $value==fill-available or $value==available {
        #{$property}: -webkit-fill-available;
        #{$property}: -moz-available;
        #{$property}: fill-available;
    }

    @else {
        #{$property}: $value;
    }
}

//#endregion

//#region Position

/*
    Name : Position
    Desc : Define position of an element as relative, absolute or fixed with top, left, margin etc values in no specific order
    Usage: 
    %float-btn {
        @include position("fixed" top 100px right 5px);
    }
*/

$positionList: (top right bottom left margin margin-top margin-bottom margin-left margin-right);

@mixin position($position, $args) {
    @each $o in $positionList {
        $i: index($args, $o);

        @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
            #{$o}: nth($args, $i + 1);
        }
    }

    position: $position;
}

/* 
    Name: Absolute
    Desc: Define position of an element as absolute with top, left, margin etc values in no specific order
    Dependent on: Position
    Usage: 
    %footer {
        @include absolute(bottom 0px left 0px right 0px);
    }
*/

@mixin absolute($args) {
    @include position("absolute", $args);
}

/* 
    Name: Fixed
    Desc: Define position of an element as fixed with top, left, margin etc values in no specific order
    Dependent on: Position
    Usage: 
    %sticky {
        @include fixed(top 100px right 5px);
    }

*/

@mixin fixed($args) {
    @include position("fixed", $args);
}

/* 
    Name: Relative
    Desc: Define position of an element as relative with top, left, margin etc values in no specific order
    Dependent on: Position
    Usage: 
    %section {
        @include relative(margin auto);
    }

*/

@mixin relative($args) {
    @include position("relative", $args);
}

/* #endregion */

//#region Vendor Prefix

/* 
    Name: Prefix
    Desc: Add vendor prefixes to multiple properties. Expects a SCSS MAP of properties.
    Usage: 
    .some-element {
        @include prefix((
            column-count: 3,
            column-gap: 1em,
            column-rule: 1px solid silver,
            column-width: 20em
        )), webkit moz);
    }

*/

@mixin prefix($map, $vendors: webkit moz ms o) {

    @each $prop,
    $value in $map {
        @if $vendors {
            @each $vendor in $vendors {
                #{"-" + $vendor + "-" + $prop}: #{$value};
            }
        }

        // Dump regular property anyway
        #{$prop}: #{$value};
    }
}

//#endregion

//#region Breakpoints

/* 
    Name: Breakpoint
    Desc: Easily add media query to a block of SCSS by just providing pre-defined screen name(s). It accepts a mandatory
        parameter for lower limit and an optional parameter for upper limit. The map can be tweaked as per own needs.
    Dependent on: $breakpoints MAP
    Usage: 
    .element {
        color: red;

        @include breakpoint(mobile) {
            color: blue;
        }
    }

*/

$breakpoints: ('mobile' : (max-width : 767px),
    'iPad' : (min-width : 768px),
    'iPadPro': (min-width: 1024px),
    'medium': (min-width : 992px),
    'large' : (min-width: 1200px),
    'landscape': (orientation: landscape),
    'custom': (min-height : 40em));

@mixin breakpoint($breakpoint1, $breakpoint2: "") {

    // Check if first breakpoint is provided
    @if map-has-key($breakpoints, $breakpoint1) {

        // Check if second breakpoint is provided as well
        @if map-has-key($breakpoints, $breakpoint2) {
            @media screen and #{inspect(map-get($breakpoints, $breakpoint1))} and #{inspect(map-get($breakpoints, $breakpoint2))} {
                @content;
            }
        }

        @else {
            @media screen and #{inspect(map-get($breakpoints, $breakpoint1))} {
                @content;
            }
        }
    }

    @else {
        @warn "Couldn't find a breakpoint named `#{$breakpoint1}`.";
    }
}

@mixin touch-device() {
    @media (hover: none) {
        @content;
    }
}

//#endregion

//#region Opacity

/* 
    Name: Opacity
    Desc: Add opacity to an element. It supports IE prefix as well.
    Usage: 
    .faded-text {
        @include opacity(0.8);
    }

*/

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

//#endregion

//#region Flexbox

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

/* 
    Name: Flexbox
    Desc: Add display: flex to an element along with vendor prefixes.  Optional parameter for applying
    !important on the property. Parameter value can be anything (literally) but not null.
    Dependent on: 
    Usage: 
    .element {
        @include flexbox;
    }

*/

@mixin flexbox($imp: null) {
    @if ($imp !=null) {
        display: -webkit-box !important;
        display: -moz-box !important;
        display: -ms-flexbox !important;
        display: -webkit-flex !important;
        display: -ms-flexbox !important;
        display: flex !important;
    }

    @else {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
    }
}


/* 
    Name: Inline Flex
    Desc: Add display: inline-flex to an element along with vendor prefixes. Optional parameter for applying
    !important on the property. Parameter value can be anything (literally) but not null.
    Dependent on: 
    Usage: 
    .element {
        @include inline-flex;
    }

*/
@mixin inline-flex($imp: null) {
    @if ($imp !=null) {
        display: -webkit-inline-box !important;
        display: -moz-inline-box !important;
        display: -webkit-inline-flex !important;
        display: -ms-inline-flexbox !important;
        display: inline-flex !important;
    }

    @else {
        display: -webkit-inline-box;
        display: -moz-inline-box;
        display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
    }
}

/* 
    Name: Flex
    Desc: The 'flex' shorthand. Adds flex shorthand (flex-grow, flex-shrink and flex-basis) to an element along with
        required vendor prefixes. It applies to flex items only.
        Possible values: <positive-number>, initial, auto, or none
    Dependent on: 
    Usage: 
    .element {
        @include flex(0, 0, 50vw);
    }

*/

@mixin flex($fg: 1, $fs: 0, $fb: auto) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg)=='list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box: $fg-boxflex;
    -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flexbox: $fg $fs $fb;
    flex: $fg $fs $fb;
}

/* 
    Name: Flex Direction
    Desc: It defines the flex flow direction and is applied to flex containers only.
        Possible values: row | row-reverse | column | column-reverse
    Dependent on: 
    Usage: 
    .element {
        @include flex-direction(column);
    }

*/

@mixin flex-direction($direction: row) {
    @if $direction==row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
        -moz-box-direction: reverse;
        -moz-box-orient: horizontal;
    }

    @else if $direction==column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
        -moz-box-direction: normal;
        -moz-box-orient: vertical;
    }

    @else if $direction==column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
        -moz-box-direction: reverse;
        -moz-box-orient: vertical;
    }

    @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
        -moz-box-orient: horizontal;
    }

    -webkit-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

/* 
    Name: Flex Wrap
    Desc: It defines how wrapping should take place in flex containers
        Possible values: nowrap | wrap | wrap-reverse
    Dependent on: 
    Usage: 
    .element {
        @include flex-wrap(wrap);
    }

*/

@mixin flex-wrap($wrap: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $wrap;

    @if $wrap==nowrap {
        -ms-flex-wrap: none;
    }

    @else {
        -ms-flex-wrap: $wrap;
    }

    flex-wrap: $wrap;
}

/* 
    Name: Flex Flow
    Desc: It is a mix of flex direction and wrap properties for flex containers
        Possible values: <flex-direction> || <flex-wrap>
    Dependent on: 
    Usage: 
    .element {
        @include flex-flow(row nowrap);
    }

*/
@mixin flex-flow($flow: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

/* 
    Name: Flex Order
    Desc: It defines the order of occurence of elements on web page
        Possible values: <integer>
    Dependent on: 
    Usage: 
    .element {
        @include order(2);
    }

*/
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int+1;
    -moz-box-ordinal-group: $int+1;
    -webkit-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

/* 
    Name: Flex Grow
    Desc: It defines the factor by which a flex child should grow depending upon space availability
        Possible values: <integer>
    Dependent on: 
    Usage: 
    .element {
        @include flex-grow(2);
    }

*/
@mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
    -moz-box-flex: $int;
    -webkit-flex-grow: $int;
    -ms-flex: $int;
    flex-grow: $int;
}

/* 
    Name: Flex Shrink
    Desc: It defines the factor by which a flex child should shrink depending upon space availability
        Possible values: <integer>
    Dependent on: 
    Usage: 
    .element {
        @include flex-shrink(2);
    }

*/
@mixin flex-shrink($int: 0) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex: $int;
    flex-shrink: $int;
}

/* 
    Name: Flex Basis
    Desc: It defines the main size of a flex child/item  initially
        Possible values: <width>
    Usage: 
    .element {
        @include flex-basis(20%);
    }

*/
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}

/* 
    Name: Flex Justify Content
    Desc: It defines the alignment along the main axis within Flex Containers
    Possible values: flex-start (default) | flex-end | center | space-between | space-around
    Usage: 
    .element {
        @include justify-content(space-between);
    }
    Note: space-* values not supported in older syntaxes.

*/
@mixin justify-content($value: flex-start) {
    @if $value==flex-start {
        -webkit-box-pack: start;
        -moz-box-pack: start;
        -ms-flex-pack: start;
    }

    @else if $value==flex-end {
        -webkit-box-pack: end;
        -moz-box-pack: end;
        -ms-flex-pack: end;
    }

    @else if $value==space-between {
        -webkit-box-pack: justify;
        -moz-box-pack: justify;
        -ms-flex-pack: justify;
    }

    @else if $value==space-around {
        -ms-flex-pack: distribute;
    }

    @else {
        -webkit-box-pack: $value;
        -moz-box-pack: $value;
        -ms-flex-pack: $value;
    }

    -webkit-justify-content: $value;
    justify-content: $value;
}

/* 
    Name: Flex Align Content
    Desc: It helps aligning a flex container's lines within it when there is extra space in the cross-axis
    Possible values: flex-start | flex-end | center | space-between | space-around | stretch
    Usage: 
    .element {
        @include align-content(space-between);
    }

*/
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;

    @if $value==flex-start {
        -ms-flex-line-pack: start;
    }

    @else if $value==flex-end {
        -ms-flex-line-pack: end;
    }

    @else {
        -ms-flex-line-pack: $value;
    }

    align-content: $value;
}

/* 
    Name: Flex Align Items
    Desc: It defines the default behaviour for how flex items are laid out along the cross axis 
        on the current line within flex containers.
    Possible values: flex-start | flex-end | center | space-between | space-around | stretch (default)
    Usage: 
    .element {
        @include align-items(space-between);
    }

*/
@mixin align-items($value: stretch) {
    @if $value==flex-start {
        -webkit-box-align: start;
        -moz-box-align: start;
        -ms-flex-align: start;
    }

    @else if $value==flex-end {
        -webkit-box-align: end;
        -moz-box-align: end;
        -ms-flex-align: end;
    }

    @else {
        -webkit-box-align: $value;
        -moz-box-align: $value;
        -ms-flex-align: $value;
    }

    -webkit-align-items: $value;
    align-items: $value;
}

/* 
    Name: Flex Align Self
    Desc: It makes possible to override the 'align-items' value for specific flex items.
    Possible values: flex-start | flex-end | center | baseline |  stretch
    Usage: 
    .element {
        @include align-self(center);
    }

*/
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;

    @if $value==flex-start {
        -ms-flex-item-align: start;
    }

    @else if $value==flex-end {
        -ms-flex-item-align: end;
    }

    @else {
        -ms-flex-item-align: $value;
    }

    align-self: $value;
}

//#endregion

//#region Typically SASS

@mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
        @content;
    }
}

//#endregion

//#region Text Related

/*
    Name: Truncate String
    Desc: Pass max-width (for example: 200px) and text within should have ellipsis effect applied to it
    Usage:
    .title-text {
        @include truncateString(200px);
    }

*/
@mixin truncateString($max-width) {
    max-width: $max-width;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

/*
    Name: Text Selection
    Desc: Apply CSS when text is selected
    Usage:
    .title-text {
        @include selection() {
            color: green;
        };
    }

*/
@mixin selection() {
    &::-moz-selection,
    ::selection {
        @content;
    }
}

/*
    Name: Set font
    Desc: Shorthand for setting multiple font properties like font-family, color, font-weight, line-height
    Usage:
    .title-text {
        @include setFont(f sans-serif c white w 600 l 1em);
    }

*/
$fontArgs: ('f': font-family,
    's': font-size,
    'c': color,
    'w': font-weight,
    'l': line-height);

@mixin setFont($args) {
    @each $o in f s c w l {
        $i: index($args, $o);

        @if $i and $i+1 <=length($args) {
            #{inspect(map-get($fontArgs, $o))}: nth($args, $i + 1);
        }
    }
}

/*
    Name: Placeholder
    Desc: It sets placeholder CSS with vendor prefixes
    Usage:
    .myInput {
        @include placeholder() {
            color: blue;
            font-weight: 400;
        };
    }

*/
@mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
        @content;
    }

    @include optional-at-root(':-moz-placeholder') {
        @content;
    }

    @include optional-at-root('::-moz-placeholder') {
        @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
        @content;
    }
}

//#endregion

//#region Browser Specific

// Write firefox specific CSS
@mixin firefox {
    @-moz-document url-prefix() {
        @content;
    }
}

// Write IE specific CSS
@mixin IE {

    @media screen and (-ms-high-contrast: active),
    (-ms-high-contrast: none) {
        @content;
    }
}

//#endregion

//#region BEM (block Element Modifier)

/*
    Name : BEM Element
    Desc : Shorthand to define element of a block as per BEM
    Usage: 
    .block {
        width: 100%;
        @include e(elem) {
            width: auto;
        };
    }
    Output =>  .block { width: 100%; }
                            .block__elem { width: auto; }
*/

@mixin e($element) {
    &__#{$element} {
        @content;
    }
}

/*
    Name : BEM Modifier
    Desc : Shorthand to define modifier of a block or block element as per BEM
    Usage: 
    .block {
        width: 100%;
        @include m(small) {
            width: 25%;
        };
    }
    Output =>  .block { width: 100%; }
                            .block--small { width: 25%; }
*/
@mixin m($modifier) {
    &--#{$modifier} {
        @content;
    }
}

//#endregion

